{"version":3,"file":"product.js","mappings":";;;;;;;;;;;;;;AAAO;;;;;;;;;;;;;;;;;;;ACAmC;AACgB;AACO;AACX;;AAEvC;AACf;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,wCAAwC,8DAAkB;AAC1D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qDAAW;AAC9C;AACA;AACA,MAAM,qDAAM,oCAAoC,mEAAwB;AACxE,KAAK;AACL;;AAEA;AACA;AACA,IAAI,qDAAM,iDAAiD,mEAAwB;AACnF;;AAEA;AACA;AACA;AACA,4BAA4B,qDAAM;AAClC;;AAEA,IAAI,qDAAM;AACV;;AAEA;AACA,qBAAqB,yDAAU;AAC/B;;AAEA;AACA,qBAAqB,sDAAO;AAC5B;AACA;;;;;;;;;;;;;;;;;;;;AC3DA;AACO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP,kCAAkC,GAAG;;AAErC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC9CwC;;AAEjC;AACP;AACA;AACA;;AAEO;AACP,2BAA2B,sDAAQ;AACnC;AACA;;AAEA,uBAAuB,sDAAQ;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;;AAEO;AACP,0BAA0B,sDAAQ;AAClC;AACA;;AAEA,0BAA0B,sDAAQ;AAClC;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP,6BAA6B,sDAAQ;AACrC;AACA;;AAEA;AACA;AACA;;AAEO;AACP;AACA;;;;;;;;;;;;;;;;;;AC9DgD;;AAEjC;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,4DAAa;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1BkC;AACG;AACL;;AAEhC;AACA,0BAA0B,oDAAe,+CAA+C,KAAK,IAAI,KAAK;;AAEtG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,6BAA6B,iDAAQ;AACpD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,8CAAM;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/FkC;;AAElC;AACA,UAAU,+DAA+D;AACzE,8CAA8C,GAAG;AACjD;AACA,kCAAkC,MAAM;AACxC;AACA,gBAAgB,aAAa,UAAU;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,IAAI;AACpB,gBAAgB,KAAK;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEe,sBAAsB,iDAAQ;AAC7C;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,kBAAkB,gBAAgB;AAC7E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC3DqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;AACiE;;;;;;;;;;;;;;;ACjCpE;AACA;AACsB;;;;;;;UCFtB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN4D;AAC9B;;AAE9B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,+DAAoB;AACrD","sources":["webpack://fatburger/./src/consts.js","webpack://fatburger/./src/presenter/product-list.js","webpack://fatburger/./src/utils/common.js","webpack://fatburger/./src/utils/render.js","webpack://fatburger/./src/view/abstract.js","webpack://fatburger/./src/view/add-product-form.js","webpack://fatburger/./src/view/product.js","webpack://fatburger/./.yarn/cache/nanoid-npm-3.3.4-3d250377d6-2fddd6dee9.zip/node_modules/nanoid/index.browser.js","webpack://fatburger/./.yarn/cache/nanoid-npm-3.3.4-3d250377d6-2fddd6dee9.zip/node_modules/nanoid/url-alphabet/index.js","webpack://fatburger/webpack/bootstrap","webpack://fatburger/webpack/runtime/define property getters","webpack://fatburger/webpack/runtime/hasOwnProperty shorthand","webpack://fatburger/webpack/runtime/make namespace object","webpack://fatburger/./src/product.js"],"sourcesContent":["export const MEASURES = ['гр.', 'шт.'];\n","import ProductView from '../view/product';\nimport AddProductFormView from '../view/add-product-form';\nimport { remove, render, RenderPosition } from '../utils/render';\nimport { addItem, updateItem } from '../utils/common';\n\nexport default class ProductList {\n  constructor(container, changeData) {\n    this._container = container;\n\n    this._removeProductClickHandler = this._removeProductClickHandler.bind(this);\n    this._addProductClickHandler = this._addProductClickHandler.bind(this);\n\n    this._productComponentList = {};\n    this._changeData = changeData;\n\n    this._addProductFormComponent = new AddProductFormView();\n  }\n\n  init(products) {\n    this._products = products;\n\n    this._clearList();\n    this._renderList();\n    this._renderAddProductForm();\n  }\n\n  _renderList() {\n    this._products.forEach((product) => {\n      if (product.isDeleted) {\n        return;\n      }\n      const productComponent = new ProductView(product);\n      productComponent.setRemoveClickHandler(this._removeProductClickHandler);\n      this._productComponentList[product.id] = productComponent;\n      render(this._container, productComponent, RenderPosition.BEFOREEND);\n    });\n  }\n\n  _renderAddProductForm() {\n    this._addProductFormComponent.setAddClickHandler(this._addProductClickHandler);\n    render(this._container, this._addProductFormComponent, RenderPosition.BEFOREEND);\n  }\n\n  _clearList() {\n    Object\n      .values(this._productComponentList)\n      .forEach((product) => remove(product));\n    this._productComponentList = {};\n\n    remove(this._addProductFormComponent);\n  }\n\n  _removeProductClickHandler(product) {\n    this._changeData(updateItem(this._products, product));\n  }\n\n  _addProductClickHandler(product) {\n    this._changeData(addItem(this._products, product));\n  }\n}\n","//Native ES6\nexport const random = (a = 1, b = 0) => {\n  const lower = Math.min(a, b);\n  const upper = Math.max(a, b);\n  return lower + Math.random() * (upper - lower);\n};\n\nexport const randomInt = (a = 1, b = 0) => {\n  const lower = Math.ceil(Math.min(a, b));\n  const upper = Math.floor(Math.max(a, b));\n  return Math.floor(lower + Math.random() * (upper - lower + 1));\n};\n\nexport const randomElementFromArray = (array) => (\n  array[randomInt(0, array.length - 1)]\n);\n\nexport const updateItem = (items, update) => {\n  const index = items.findIndex((item) => item.id === update.id);\n\n  if (index === -1) {\n    return items;\n  }\n\n  return [\n    ...items.slice(0, index),\n    update,\n    ...items.slice(index + 1),\n  ];\n};\n\nexport const addItem = (items, newItem) => {\n  return [...items, newItem];\n};\n\nexport const removeItem = (items, remove) => {\n  const index = items.findIndex(({id}) => id === remove.id);\n\n  if (index === -1) {\n    return items;\n  }\n\n  return [\n    ...items.slice(0, index),\n    ...items.slice(index + 1)\n  ];\n};\n","import Abstract from '../view/abstract';\n\nexport const RenderPosition = {\n  AFTERBEGIN: 'afterbegin',\n  BEFOREEND: 'beforeend',\n};\n\nexport const render = (container, child, place) => {\n  if (container instanceof Abstract) {\n    container = container.getElement();\n  }\n\n  if (child instanceof Abstract) {\n    child = child.getElement();\n  }\n\n  switch (place) {\n    case RenderPosition.AFTERBEGIN:\n      container.prepend(child);\n      break;\n    case RenderPosition.BEFOREEND:\n      container.append(child);\n      break;\n  }\n};\n\nexport const createElement = (template) => {\n  const newElement = document.createElement('div');\n  newElement.innerHTML = template;\n\n  return newElement.firstChild;\n};\n\nexport const replace = (newChild, oldChild) => {\n  if (oldChild instanceof Abstract) {\n    oldChild = oldChild.getElement();\n  }\n\n  if (newChild instanceof Abstract) {\n    newChild = newChild.getElement();\n  }\n\n  const parent = oldChild.parentElement;\n\n  if (parent === null || oldChild === null || newChild === null) {\n    throw new Error('Can\\'t replace unesisting elements');\n  }\n\n  parent.replaceChild(newChild, oldChild);\n}\n\nexport const remove = (component) => {\n  if (!(component instanceof Abstract)) {\n    throw new Error('Can remove only components');\n  }\n\n  component.getElement().remove();\n  component.removeElement();\n};\n\nexport const renderTemplate = (container, template, place) => {\n  container.insertAdjacentHTML(place, template);\n};\n\n\n","import { createElement } from '../utils/render';\n\nexport default class Abstract {\n  constructor() {\n    if (new.target === 'Abstract') {\n      throw new Error('Can\\'t instantiate Abstract, only concrete one.');\n    }\n\n    this._element = null;\n    this._callback = {};\n  }\n\n  getTemplate() {\n    throw new Error('Method not implemented: getTemplate');\n  }\n\n  getElement() {\n    if (this._element === null) {\n      this._element = createElement(this.getTemplate());\n    }\n    return this._element;\n  }\n\n  removeElement() {\n    this._element = null;\n  }\n}\n","import Abstract from \"./abstract\";\nimport { MEASURES } from \"../consts\";\nimport { nanoid } from 'nanoid';\n\nconst createAddProductFormTemplate = () => {\n  const optionsTemplate = MEASURES.reduce((result, item) => result += `<option value=\"${item}\">${item}</option>`, '');\n\n  return `<form class=\"add-product-form\">\n    <div class=\"form-field\">\n      <label for=\"title\">Название</label>\n      <input type=\"text\" name=\"title\" placeholder=\"Название\" autocomplete=\"off\">\n    </div>\n\n    <div class=\"form-field\">\n      <label for=\"energy\">Калории</label>\n      <input type=\"number\" name=\"energy\" placeholder=\"Калории\" inputmode=\"numeric\">\n    </div>\n\n    <div class=\"form-field\">\n      <label for=\"protein\">Белки</label>\n      <input type=\"number\" name=\"protein\" placeholder=\"Белки\" inputmode=\"numeric\">\n    </div>\n\n    <div class=\"form-field\">\n      <label for=\"fat\">Жиры</label>\n      <input type=\"number\" name=\"fat\" placeholder=\"Жиры\" inputmode=\"numeric\">\n    </div>\n\n    <div class=\"form-field\">\n      <label for=\"carb\">Углеводы</label>\n      <input type=\"number\" name=\"carb\" placeholder=\"Углеводы\" inputmode=\"numeric\">\n    </div>\n\n    <div class=\"form-field\">\n      <label for=\"measure\">Единицы</label>\n      <select name=\"measure\">\n        ${optionsTemplate}\n      </select>\n    </div>\n\n    <div class=\"form-field\">\n      <label for=\"count\">Кол-во</label>\n      <input type=\"number\" name=\"count\" placeholder=\"Кол-во\" value=\"1\" inputmode=\"numeric\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-success btn-save\">Добавить</button>\n  </form>`;\n};\n\nexport default class AddProductForm extends Abstract {\n  constructor() {\n    super();\n\n    this._addClickHandler = this._addClickHandler.bind(this);\n  }\n\n  getTemplate() {\n    return createAddProductFormTemplate();\n  }\n\n  _addClickHandler(evt) {\n    evt.preventDefault();\n    const titleElement = this.getElement().querySelector('input[name=\"title\"]');\n    const energyElement = this.getElement().querySelector('input[name=\"energy\"]');\n    const proteinElement = this.getElement().querySelector('input[name=\"protein\"]');\n    const fatElement = this.getElement().querySelector('input[name=\"fat\"]');\n    const carbElement = this.getElement().querySelector('input[name=\"carb\"]');\n    const measureElement = this.getElement().querySelector('select[name=\"measure\"]');\n    const countElement = this.getElement().querySelector('input[name=\"count\"]');\n\n    if (titleElement.value === '' ||\n    energyElement.value === '' || proteinElement.value === '' || fatElement.value === '' || carbElement.value === '' || countElement.value === '') {\n      alert('Заполните все поля!');\n      return;\n    }\n\n    const newProduct = {\n      id: nanoid(),\n      title: titleElement.value,\n      energy: parseInt(energyElement.value),\n      protein: parseInt(proteinElement.value),\n      fat: parseInt(fatElement.value),\n      carb: parseInt(carbElement.value),\n      measure: measureElement.value,\n      measureCount: parseInt(countElement.value),\n      isVisible: true,\n    };\n\n    this._callback.addClick(newProduct);\n  }\n\n  setAddClickHandler(callback) {\n    this._callback.addClick = callback;\n    const addButton = this.getElement().querySelector('.btn-save');\n    addButton.addEventListener('click', this._addClickHandler);\n  }\n}\n","import Abstract from './abstract';\n\nconst createProductTemplate = (product) => {\n  const { id, title, energy, protein, fat, carb, measure, measureCount } = product;\n  return `<li class=\"product-item\" data-id=\"${id}\">\n    <div class=\"product-top\">\n      <h3 class=\"product-title\">${title}</h3>\n      <div class=\"product-count\">\n        <span>${measureCount}</span> ${measure}\n      </div>\n    </div>\n\n    <div class=\"product-bottom\">\n      <table class=\"product-info-table\">\n        <tr>\n          <th>Калории</th>\n          <th>Белки</th>\n          <th>Жиры</th>\n          <th>Углеводы</th>\n        </tr>\n        <tr>\n          <td>${energy}</td>\n          <td>${protein}</td>\n          <td>${fat}</td>\n          <td>${carb}</td>\n        </tr>\n      </table>\n\n      <div class=\"controls\">\n        <button class=\"btn btn-remove\"></button>\n      </div>\n    </div>\n  </li>`;\n};\n\nexport default class Product extends Abstract {\n  constructor(product) {\n    super();\n\n    this._product = product;\n\n    this._removeClickHandler = this._removeClickHandler.bind(this);\n  }\n\n  getTemplate() {\n    return createProductTemplate(this._product);\n  }\n\n  _removeClickHandler(evt) {\n    evt.preventDefault();\n    const changedProduct = Object.assign({}, this._product, {isDeleted: true});\n    this._callback.removeClick(changedProduct);\n  }\n\n  setRemoveClickHandler(callback) {\n    this._callback.removeClick = callback;\n    const removeButton = this.getElement().querySelector('.btn-remove');\n    removeButton.addEventListener('click', this._removeClickHandler);\n  }\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport { urlAlphabet }\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import ProductListPresenter from './presenter/product-list';\nimport {nanoid} from 'nanoid';\n\nlet products = [];\n\nif (localStorage.getItem('products')) {\n  products = JSON.parse(localStorage.getItem('products'));\n}\n\nconst changeData = (updatedData) => {\n  localStorage.setItem('products', JSON.stringify(updatedData));\n  productListPresenter.init(updatedData);\n};\n\nconst mainElement = document.querySelector('.main');\nconst productListPresenter = new ProductListPresenter(mainElement, changeData);\nproductListPresenter.init(products);\n"],"names":[],"sourceRoot":""}
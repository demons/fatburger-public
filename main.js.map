{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAO;;;;;;;;;;;;;;;;;ACA6D;AACpC;;AAEhC;;AAEA;AACA,MAAM,8CAAM;AACZ;AACA,SAAS,wDAAS;AAClB,CAAC;;AAED;;AAEA;AACA,SAAS,IAAI,EAAE,qEAAsB;;AAErC,mBAAmB,wDAAS;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,WAAW;AACpC,oCAAoC,GAAG;AACvC,YAAY,6BAA6B;;AAEzC;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEO;AACP;;AAEA;AACA,QAAQ,8CAAM;AACd,WAAW,qEAAsB;AACjC;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjDoE;AACpC;;AAEK;;AAErC;;;;AAIO;AACP,MAAM,8CAAM;AACZ,SAAS,qEAAsB;AAC/B,UAAU,wDAAS;AACnB,WAAW,wDAAS;AACpB,OAAO,wDAAS;AAChB,QAAQ,wDAAS;AACjB,WAAW,qEAAsB,CAAC,6CAAQ;AAC1C;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;AClBgE;AACC;AACrB;;AAEE;AACO;AACN;;AAEjC;AACf;AACA;AACA;AACA;;AAEA,mCAAmC,wDAAa;AAChD,sCAAsC,4DAAgB;;AAEtD;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAI,qDAAM;AACV;;AAEA;AACA,+BAA+B,wDAAc;AAC7C;AACA;AACA;;AAEA;AACA,IAAI,qDAAM,4CAA4C,mEAAwB;;AAE9E;AACA;;AAEA;AACA,IAAI,qDAAM,wDAAwD,mEAAwB;;AAE1F;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,yDAAU;AACnC;AACA;AACA,yBAAyB,yDAAU;AACnC;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,sDAAO,eAAe,yDAAW;AACtD;AACA;;;;;;;;;;;;;;;;;;;;;AC1EkD;AACgB;AACQ;;AAEpC;AACU;AACS;;AAE1C;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wCAAwC,qDAAM;AAC9C;AACA,IAAI,qDAAM;AACV;;AAEA;AACA;AACA,+BAA+B,mDAAS;AACxC;AACA;AACA,IAAI,qDAAM,wCAAwC,mEAAwB;;AAE1E;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,oCAAoC,wDAAc;AAClD;AACA;AACA,IAAI,qDAAM,4CAA4C,mEAAwB;AAC9E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAAgB;AAC1C,8BAA8B,sDAAO;AACrC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,6DAAkB;AAC1D;AACA;;AAEA;;AAEA,IAAI,sDAAO;AACX,IAAI,qDAAM;AACV;AACA;;AAEA;AACA,oCAAoC,wDAAc,6BAA6B;AAC/E;;AAEA,IAAI,sDAAO;AACX,IAAI,qDAAM;AACV;;AAEA;AACA;;AAEA;AACA,8BAA8B,yDAAU;AACxC;AACA;;AAEA;AACA,8BAA8B,yDAAU;AACxC;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1HgC;;AAEzB;AACP,MAAM,8CAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;AAEM;AACP,MAAM,8CAAM;AACZ;AACA;AACA,CAAC;;AAEM;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,6BAA6B;AACzC;;AAEA,kEAAkE;AAClE;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA,QAAQ,8CAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5DA;AACO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP,kCAAkC,GAAG;;AAErC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC9CwC;;AAEjC;AACP;AACA;AACA;;AAEO;AACP,2BAA2B,sDAAQ;AACnC;AACA;;AAEA,uBAAuB,sDAAQ;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;;AAEO;AACP,0BAA0B,sDAAQ;AAClC;AACA;;AAEA,0BAA0B,sDAAQ;AAClC;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP,6BAA6B,sDAAQ;AACrC;AACA;;AAEA;AACA;AACA;;AAEO;AACP;AACA;;;;;;;;;;;;;;;;;;AC9DgD;;AAEjC;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,4DAAa;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1BsC;;AAEtC;AACA;AACA;AACA;;AAEe,2BAA2B,iDAAY;AACtD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC5BsC;;AAEtC,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,0CAA0C,OAAO;AACjD,yCAAyC,QAAQ;AACjD,oCAAoC,IAAI;AACxC,yCAAyC,KAAK;AAC9C;AACA;;AAEe,qBAAqB,iDAAY;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1BsC;;AAEtC;;AAEe,wBAAwB,iDAAY;AACnD;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRsC;;AAEtC;AACA,UAAU,oBAAoB;AAC9B,UAAU,6BAA6B;;AAEvC,iDAAiD,GAAG;AACpD;AACA,gCAAgC,MAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,IAAI;AACpB,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,oBAAoB,iDAAY;AAC/C,wBAAwB;AACxB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnEgC;AACM;AACsB;;AAE5D;AACA,SAAS,2BAA2B;;AAEpC;AACA,UAAU,6BAA6B;;AAEvC,iCAAiC,6DAAsB;;AAEvD,sDAAsD,GAAG;AACzD;AACA,QAAQ;AACR;AACA,kEAAkE,YAAY,WAAW,MAAM,yBAAyB,yBAAyB;AACjJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,IAAI;AACpB,gBAAgB,KAAK;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,6BAA6B,iDAAY;AACxD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtFsC;;AAEtC;AACA,SAAS,2BAA2B;AACpC;;AAEA,UAAU,oCAAoC;;AAE9C,sDAAsD,GAAG;AACzD;AACA,qCAAqC,MAAM;AAC3C;AACA,gBAAgB,MAAM,UAAU;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,IAAI;AACpB,gBAAgB,KAAK;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEe,yBAAyB,iDAAY;AACpD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7EsC;;AAEtC;AACA;;AAEA;AACA,YAAY,+BAA+B;AAC3C;AACA,iCAAiC,GAAG,IAAI,WAAW,GAAG,OAAO,EAAE,8BAA8B;AAC7F;;AAEA,oBAAoB,QAAQ;AAC5B;;AAEe,iCAAiC,iDAAY;AAC5D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACzBqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;AACiE;;;;;;;;;;;;;;;ACjCpE;AACA;AACsB;;;;;;;UCFtB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACNgC;;AAEa;AACI;;AAEU;;AAEpB;AACiB;AACQ;;AAEhE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA,oEAAoE,yDAAW;AAC/E;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI,qDAAM;AACV;AACA,wBAAwB,oDAAU;AAClC,EAAE,qDAAM,+BAA+B,mEAAwB;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,2DAAa;AAChC;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+BAA+B,6DAAkB;AACjD","sources":["webpack://fatburger/./src/consts.js","webpack://fatburger/./src/mock/chunk.js","webpack://fatburger/./src/mock/product.js","webpack://fatburger/./src/presenter/chunk-list.js","webpack://fatburger/./src/presenter/chunk.js","webpack://fatburger/./src/utils/chunk.js","webpack://fatburger/./src/utils/common.js","webpack://fatburger/./src/utils/render.js","webpack://fatburger/./src/view/abstract.js","webpack://fatburger/./src/view/add-chunk-form.js","webpack://fatburger/./src/view/amount.js","webpack://fatburger/./src/view/chunk-list.js","webpack://fatburger/./src/view/chunk.js","webpack://fatburger/./src/view/ingredient-edit.js","webpack://fatburger/./src/view/ingredient.js","webpack://fatburger/./src/view/product-list-control.js","webpack://fatburger/./.yarn/cache/nanoid-npm-3.3.4-3d250377d6-2fddd6dee9.zip/node_modules/nanoid/index.browser.js","webpack://fatburger/./.yarn/cache/nanoid-npm-3.3.4-3d250377d6-2fddd6dee9.zip/node_modules/nanoid/url-alphabet/index.js","webpack://fatburger/webpack/bootstrap","webpack://fatburger/webpack/runtime/define property getters","webpack://fatburger/webpack/runtime/hasOwnProperty shorthand","webpack://fatburger/webpack/runtime/make namespace object","webpack://fatburger/./src/main.js"],"sourcesContent":["export const MEASURES = ['гр.', 'шт.'];\n","import { randomInt, randomElementFromArray } from '../utils/common';\nimport { nanoid } from 'nanoid';\n\nconst TITLES = ['Завтрак', 'Обед', 'Перекус', 'Ужин', 'Поздний ужин'];\n\nconst generateIngredient = (productId) => ({\n  id: nanoid(),\n  productId,\n  count: randomInt(20, 250),\n});\n\n// te\n\nconst generateIngredientList = (products) => {\n  const {id} = randomElementFromArray(products);\n\n  return new Array(randomInt(2, 5)).fill(null).map(() => generateIngredient(id));\n};\n\nconst computeAmount = (ingredients, products) => {\n  const amount = {\n    energy: 0,\n    protein: 0,\n    fat: 0,\n    carb: 0,\n  };\n\n  ingredients.forEach(({ productId }) => {\n    const product = products.find(({id}) => id === productId);\n    const { energy, protein, fat, carb } = product;\n\n    amount.energy += energy;\n    amount.protein += protein;\n    amount.fat += fat;\n    amount.carb += carb;\n  });\n\n  return amount;\n};\n\nexport const generateChunk = (products) => {\n  const components = generateIngredientList(products);\n\n  return {\n    id: nanoid(),\n    title: randomElementFromArray(TITLES),\n    amount: computeAmount(components, products),\n    ingredients: generateIngredientList(products),\n  };\n};\n","import { randomInt, randomElementFromArray } from '../utils/common';\nimport { nanoid } from 'nanoid';\n\nimport { MEASURES } from '../consts';\n\nconst TITLES = ['Лук', 'Морковь', 'Чеснок',\t'Куриное бедро', 'Капуста', 'Кетчуп', 'Кабачок'];\n\n\n\nexport const generateProduct = () => ({\n  id: nanoid(),\n  title: randomElementFromArray(TITLES),\n  energy: randomInt(50, 200),\n  protein: randomInt(2, 21),\n  fat: randomInt(1, 15),\n  carb: randomInt(50, 230),\n  measure: randomElementFromArray(MEASURES),\n  measureCount: 1,\n});\n","import { remove, render, RenderPosition } from '../utils/render';\nimport { addItem, removeItem, updateItem } from '../utils/common';\nimport { createChunk } from '../utils/chunk';\n\nimport ChunkListView from '../view/chunk-list';\nimport AddChunkFormView from '../view/add-chunk-form';\nimport ChunkPresenter from '../presenter/chunk';\n\nexport default class ChunkList {\n  constructor(container, changeData, removeData) {\n    this._container = container;\n    this._changeData = changeData;\n    this._chunkPresenter = {};\n\n    this._chunkListComponent = new ChunkListView();\n    this._addChunkFormComponent = new AddChunkFormView();\n\n    this._chunkUpdateHandler = this._chunkUpdateHandler.bind(this);\n  }\n\n  init(chunks, products) {\n    this._chunks = chunks;\n    this._products = products;\n\n    this._clearList();\n\n    this._renderChunkList();\n\n    this._renderAddChunkForm();\n  }\n\n  _clearList() {\n    Object\n      .values(this._chunkPresenter)\n      .forEach((presenter) => presenter.destroy())\n    this._chunkPresenter = {};\n\n    remove(this._addChunkFormComponent);\n  }\n\n  _renderChunk(chunk) {\n    const chunkPresenter = new ChunkPresenter(this._chunkListComponent, this._chunkUpdateHandler);\n    chunkPresenter.init(chunk, this._products);\n    this._chunkPresenter[chunk.id] = chunkPresenter;\n  }\n\n  _renderChunkList() {\n    render(this._container, this._chunkListComponent, RenderPosition.BEFOREEND);\n\n    this._chunks.forEach((chunk) => this._renderChunk(chunk));\n  }\n\n  _renderAddChunkForm() {\n    render(this._chunkListComponent, this._addChunkFormComponent, RenderPosition.BEFOREEND);\n\n    this._addChunkFormComponent.setClickButtonHandler((title) => this._addChunkHandler(title));\n  }\n\n  // Handlers\n  _chunkUpdateHandler(updatedData, action = 'update') {\n    switch (action) {\n      case 'update':\n        this._changeData(updateItem(this._chunks, updatedData));\n        break;\n      case 'remove':\n        this._changeData(removeItem(this._chunks, updatedData));\n        break;\n    }\n  }\n\n  _addChunkHandler(title) {\n    // Add chunk\n    this._changeData(addItem(this._chunks, createChunk(title)));\n  }\n}\n","import { createIngredient } from '../utils/chunk';\nimport { addItem, removeItem, updateItem } from '../utils/common';\nimport { remove, render, RenderPosition, replace } from '../utils/render';\n\nimport ChunkView from '../view/chunk';\nimport IngredientView from '../view/ingredient';\nimport IngredientEditView from '../view/ingredient-edit';\n\nexport default class Chunk {\n  constructor(container, changeData) {\n    this._container = container;\n    this._changeData = changeData;\n\n    this._chunkComponent = null;\n    this._ingredientComponentList = {};\n\n    this._addIngredientClickHandler = this._addIngredientClickHandler.bind(this);\n    this._removeChunkClickHandler = this._removeChunkClickHandler.bind(this);\n    this._editIngredientClickHandler = this._editIngredientClickHandler.bind(this);\n    this._removeIngredientClickHandler = this._removeIngredientClickHandler.bind(this);\n    this._saveIngredientClickHandler = this._saveIngredientClickHandler.bind(this);\n    this._cancelIngredientClickHandler = this._cancelIngredientClickHandler.bind(this);\n  }\n\n  init(chunk, products) {\n    this._chunk = chunk;\n    this._products = products;\n\n    this._editIngredientComponent = null;\n\n    this._renderChunk();\n  }\n\n  destroy() {\n    Object\n      .values(this._ingredientComponentList)\n      .forEach((ingredientComponent) => remove(ingredientComponent));\n    this._ingredientComponentList = {};\n    remove(this._chunkComponent);\n  }\n\n  _renderChunk() {\n    // Render chunk\n    this._chunkComponent = new ChunkView(this._chunk);\n    this._chunkComponent.setAddClickHandler(this._addIngredientClickHandler);\n    this._chunkComponent.setRemoveClickHandler(this._removeChunkClickHandler);\n    render(this._container, this._chunkComponent, RenderPosition.BEFOREEND);\n\n    // Render ingredients\n    this._chunk.ingredients.forEach((ingredient) => {\n      this._renderIngredient(ingredient);\n    });\n  }\n\n  _renderIngredient(ingredient) {\n    const ingredientComponent = new IngredientView(ingredient, this._products);\n    ingredientComponent.setEditClickHandler(this._editIngredientClickHandler);\n    ingredientComponent.setRemoveClickHandler(this._removeIngredientClickHandler);\n    render(this._chunkComponent, ingredientComponent, RenderPosition.BEFOREEND);\n    this._ingredientComponentList[ingredient.id] = ingredientComponent;\n  }\n\n  // Handlers\n  _addIngredientClickHandler() {\n    if (this._products.length === 0) {\n      alert('Список продуктов пуст! Сначала нужно заполнить его!');\n      return;\n    }\n    const newIngredient = createIngredient();\n    this._chunk.ingredients = addItem(this._chunk.ingredients, newIngredient);\n    this._changeData(this._chunk);\n  }\n\n  _removeChunkClickHandler() {\n    this._changeData(this._chunk, 'remove');\n  }\n\n  _editIngredientClickHandler(ingredient) {\n    this._replaceToEdit(ingredient);\n  }\n\n  _replaceToEdit(ingredient) {\n    if (this._editIngredientComponent) {\n      this._changeData(this._chunk);\n      return;\n    }\n\n    this._editIngredientComponent = new IngredientEditView(ingredient, this._products);\n    this._editIngredientComponent.setSaveClickHandler(this._saveIngredientClickHandler);\n    this._editIngredientComponent.setCancelClickHandler(this._cancelIngredientClickHandler);\n\n    const ingredientComponent = this._ingredientComponentList[ingredient.id];\n\n    replace(this._editIngredientComponent, ingredientComponent);\n    remove(ingredientComponent);\n    this._ingredientComponentList[ingredient.id] = this._editIngredientComponent;\n  }\n\n  _replaceFromEdit(ingredient) {\n    const ingredientComponent = new IngredientView(ingredient, this._products);ingredientComponent.setEditClickHandler(this._editIngredientClickHandler);\n    ingredientComponent.setRemoveClickHandler(this._removeIngredientClickHandler);\n\n    replace(ingredientComponent, this._editIngredientComponent);\n    remove(this._editIngredientComponent);\n    this._ingredientComponentList[ingredient.id] = ingredientComponent;\n\n    this._editIngredientComponent = null;\n  }\n\n  _removeIngredientClickHandler(ingredient) {\n    this._chunk.ingredients = removeItem(this._chunk.ingredients, ingredient);\n    this._changeData(this._chunk);\n  }\n\n  _saveIngredientClickHandler(ingredient) {\n    this._chunk.ingredients = updateItem(this._chunk.ingredients, ingredient);\n    this._changeData(this._chunk);\n  }\n\n  _cancelIngredientClickHandler(ingredient) {\n    this._replaceFromEdit(ingredient);\n  }\n}\n","import { nanoid } from 'nanoid';\n\nexport const createChunk = (title) => ({\n  id: nanoid(),\n  title: title,\n  amount: {\n    energy: 0,\n    protein: 0,\n    fat: 0,\n    carb: 0,\n  },\n  ingredients: [],\n});\n\nexport const createIngredient = () => ({\n  id: nanoid(),\n  productId: -1,\n  count: 0,\n});\n\nexport const computeAmount = (ingredients, products) => {\n  const amount = {\n    energy: 0,\n    protein: 0,\n    fat: 0,\n    carb: 0,\n  };\n\n  // if (ingredients !== null)\n  ingredients.forEach((ingredient) => {\n    const product = products.find((product) => product.id === ingredient.productId) || products[0];\n    const { energy, protein, fat, carb } = product;\n    const count = ingredient.count || 0;\n\n    amount.energy += product.measureCount * energy * count / 100; // * кол-во грамм в штуке или на 1\n    amount.protein += product.measureCount * protein * count / 100;\n    amount.fat += product.measureCount * fat * count / 100;\n    amount.carb += product.measureCount * carb * count / 100;\n  });\n\n  amount.energy = Math.round(amount.energy);\n  amount.protein = Math.round(amount.protein);\n  amount.fat = Math.round(amount.fat);\n  amount.carb = Math.round(amount.carb);\n\n  return amount;\n};\n\nexport const createProduct = (title, energy, protein, fat, carb, measure, measureCount = 1) => {\n  return {\n    id: nanoid(),\n    title,\n    energy,\n    protein,\n    fat,\n    carb,\n    measure,\n    measureCount,\n    isDeleted: false,\n  };\n};\n","//Native ES6\nexport const random = (a = 1, b = 0) => {\n  const lower = Math.min(a, b);\n  const upper = Math.max(a, b);\n  return lower + Math.random() * (upper - lower);\n};\n\nexport const randomInt = (a = 1, b = 0) => {\n  const lower = Math.ceil(Math.min(a, b));\n  const upper = Math.floor(Math.max(a, b));\n  return Math.floor(lower + Math.random() * (upper - lower + 1));\n};\n\nexport const randomElementFromArray = (array) => (\n  array[randomInt(0, array.length - 1)]\n);\n\nexport const updateItem = (items, update) => {\n  const index = items.findIndex((item) => item.id === update.id);\n\n  if (index === -1) {\n    return items;\n  }\n\n  return [\n    ...items.slice(0, index),\n    update,\n    ...items.slice(index + 1),\n  ];\n};\n\nexport const addItem = (items, newItem) => {\n  return [...items, newItem];\n};\n\nexport const removeItem = (items, remove) => {\n  const index = items.findIndex(({id}) => id === remove.id);\n\n  if (index === -1) {\n    return items;\n  }\n\n  return [\n    ...items.slice(0, index),\n    ...items.slice(index + 1)\n  ];\n};\n","import Abstract from '../view/abstract';\n\nexport const RenderPosition = {\n  AFTERBEGIN: 'afterbegin',\n  BEFOREEND: 'beforeend',\n};\n\nexport const render = (container, child, place) => {\n  if (container instanceof Abstract) {\n    container = container.getElement();\n  }\n\n  if (child instanceof Abstract) {\n    child = child.getElement();\n  }\n\n  switch (place) {\n    case RenderPosition.AFTERBEGIN:\n      container.prepend(child);\n      break;\n    case RenderPosition.BEFOREEND:\n      container.append(child);\n      break;\n  }\n};\n\nexport const createElement = (template) => {\n  const newElement = document.createElement('div');\n  newElement.innerHTML = template;\n\n  return newElement.firstChild;\n};\n\nexport const replace = (newChild, oldChild) => {\n  if (oldChild instanceof Abstract) {\n    oldChild = oldChild.getElement();\n  }\n\n  if (newChild instanceof Abstract) {\n    newChild = newChild.getElement();\n  }\n\n  const parent = oldChild.parentElement;\n\n  if (parent === null || oldChild === null || newChild === null) {\n    throw new Error('Can\\'t replace unesisting elements');\n  }\n\n  parent.replaceChild(newChild, oldChild);\n}\n\nexport const remove = (component) => {\n  if (!(component instanceof Abstract)) {\n    throw new Error('Can remove only components');\n  }\n\n  component.getElement().remove();\n  component.removeElement();\n};\n\nexport const renderTemplate = (container, template, place) => {\n  container.insertAdjacentHTML(place, template);\n};\n\n\n","import { createElement } from '../utils/render';\n\nexport default class Abstract {\n  constructor() {\n    if (new.target === 'Abstract') {\n      throw new Error('Can\\'t instantiate Abstract, only concrete one.');\n    }\n\n    this._element = null;\n    this._callback = {};\n  }\n\n  getTemplate() {\n    throw new Error('Method not implemented: getTemplate');\n  }\n\n  getElement() {\n    if (this._element === null) {\n      this._element = createElement(this.getTemplate());\n    }\n    return this._element;\n  }\n\n  removeElement() {\n    this._element = null;\n  }\n}\n","import AbstractView from './abstract';\n\nconst createAddChunkFormTemplate = () => `<form class=\"add-chunk-form\">\n  <input type=\"text\" class=\"form-input\" placeholder=\"Введите название группы\">\n  <button type=\"submit\" class=\"btn btn-chunk btn-success\">Добавить группу</button>\n</form>`;\n\nexport default class AddChunkForm extends AbstractView {\n  constructor() {\n    super();\n\n    this._clickButtonHandler = this._clickButtonHandler.bind(this);\n  }\n\n  getTemplate() {\n    return createAddChunkFormTemplate();\n  }\n\n  _clickButtonHandler(evt) {\n    evt.preventDefault();\n    const title = this.getElement().querySelector('.form-input').value;\n    this._callback.clickButton(title);\n  }\n\n  setClickButtonHandler(callback) {\n    this._callback.clickButton = callback;\n    this.getElement().addEventListener('submit', this._clickButtonHandler);\n  }\n}\n","import AbstractView from \"./abstract\";\n\nconst createAmountTemplate = (amount = {}) => {\n  const {\n    energy = 0,\n    protein = 0,\n    fat = 0,\n    carb = 0,\n  } = amount;\n  return `<div class=\"amount\">\n    <div class=\"amount-energy\">Калории: ${energy}</div>\n    <div class=\"amount-protein\">Белки: ${protein}</div>\n    <div class=\"amount-fat\">Жиры: ${fat}</div>\n    <div class=\"amount-carb\">Углеводы: ${carb}</div>\n  </div>`;\n};\n\nexport default class Amount extends AbstractView {\n  constructor(amount) {\n    super();\n\n    this._amount = amount;\n  }\n  getTemplate() {\n    return createAmountTemplate(this._amount);\n  }\n}\n","import AbstractView from './abstract';\n\nconst createChunkListTemplate = () => '<ul class=\"chunk-list\"></ul>';\n\nexport default class ChunkList extends AbstractView {\n  getTemplate() {\n    return createChunkListTemplate();\n  }\n}\n","import AbstractView from './abstract';\n\nconst createChunkTemplate = (chunk) => {\n  const { id, title, amount } = chunk;\n  const { energy, protein, fat, carb } = amount;\n\n  return `<li class=\"chunk-list-item\" data-id=\"${id}\">\n    <div class=\"chunk-header\">\n      <h2 class=\"chunk-title\">${title}</h2>\n      <table class=\"chunk-info-table\">\n        <tr>\n          <th>Калории</th>\n          <th>Белки</th>\n          <th>Жиры</th>\n          <th>Углеводы</th>\n        </tr>\n        <tr>\n          <td>${energy}</td>\n          <td>${protein}</td>\n          <td>${fat}</td>\n          <td>${carb}</td>\n        </tr>\n      </table>\n      <div class=\"chunk-controls\">\n        <button type=\"button\" class=\"btn btn-add\"></button>\n        <button type=\"button\" class=\"btn btn-remove\"></button>\n      </div>\n    </div>\n    <ul class=\"component-list\"></ul>\n  </li>`;\n};\n\nexport default class Chunk extends AbstractView {\n  constructor(chunk = {}) {\n    super();\n\n    this._chunk = chunk;\n\n    this._addClickHandler = this._addClickHandler.bind(this);\n    this._removeClickHandler = this._removeClickHandler.bind(this);\n  }\n\n  getTemplate() {\n    return createChunkTemplate(this._chunk);\n  }\n\n  _addClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.addClick();\n  }\n\n  _removeClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.removeClick();\n  }\n\n  setAddClickHandler(callback) {\n    this._callback.addClick = callback;\n    const addButton = this.getElement().querySelector('.btn-add');\n    addButton.addEventListener('click', this._addClickHandler);\n  }\n\n  setRemoveClickHandler(callback) {\n    this._callback.removeClick = callback;\n    const removeButton = this.getElement().querySelector('.btn-remove');\n    removeButton.addEventListener('click', this._removeClickHandler);\n  }\n}\n","import { nanoid } from 'nanoid';\nimport AbstractView from './abstract';\nimport ProductListControlView from './product-list-control';\n\nconst createIngredientEditTemplate = (ingredient, products) => {\n  const {id, productId = -1, count} = ingredient;\n\n  const product = products.find((product) => product.id === productId) || products[0];\n  const { energy, protein, fat, carb } = product;\n\n  const productListControl = new ProductListControlView(products, productId);\n\n  return `<li class=\"ingredient-list-item\" data-id=\"${id}\">\n    <div class=\"ingredient-top\">\n      ${productListControl.getTemplate()}\n      <div class=\"ingredient-count\">\n        <input type=\"number\" name=\"count\" style=\"font-size: 16px; width: 50px;\" value=\"${count}\" onclick=\"this.select();\" inputmode=\"numeric\"> ${product.measure}\n      </div>\n    </div>\n\n    <div class=\"ingredient-bottom\">\n      <table class=\"ingredient-info-table\">\n        <tr>\n          <th>Калории</th>\n          <th>Белки</th>\n          <th>Жиры</th>\n          <th>Углеводы</th>\n        </tr>\n        <tr>\n          <td>${energy}</td>\n          <td>${protein}</td>\n          <td>${fat}</td>\n          <td>${carb}</td>\n        </tr>\n      </table>\n\n      <div class=\"controls\">\n        <button class=\"btn btn-save btn-success btn-middle\">Сохранить</button>\n        <button class=\"btn btn-cancel btn-error btn-middle\">Отменить</button>\n      </div>\n    </div>\n  </li>`;\n};\n\nexport default class IngredientEdit extends AbstractView {\n  constructor(ingredient, products) {\n    super();\n\n    this._ingredient = ingredient;\n    this._products = products;\n\n    this._saveClickHandler = this._saveClickHandler.bind(this);\n    this._cancelClickHandler = this._cancelClickHandler.bind(this);\n  }\n\n  getTemplate() {\n    return createIngredientEditTemplate(this._ingredient, this._products);\n  }\n\n  _saveClickHandler(evt) {\n    evt.preventDefault();\n    const selectElement = this.getElement().querySelector('select');\n    const countElement = this.getElement().querySelector('input[name=\"count\"]');\n    const updated = {\n      productId: selectElement.value,\n      count: countElement.value,\n    };\n    this._callback.saveClick(Object.assign({}, this._ingredient, updated));\n  }\n\n  _cancelClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.cancelClick(this._ingredient);\n  }\n\n  setSaveClickHandler(callback) {\n    this._callback.saveClick = callback;\n    const saveButton = this.getElement().querySelector('.btn-save');\n    saveButton.addEventListener('click', this._saveClickHandler);\n  }\n\n  setCancelClickHandler(callback) {\n    this._callback.cancelClick = callback;\n    const cancelButton = this.getElement().querySelector('.btn-cancel');\n    cancelButton.addEventListener('click', this._cancelClickHandler);\n  }\n}\n","import AbstractView from './abstract';\n\nconst createIngredientTemplate = (ingredient, products) => {\n  const {id, productId = -1, count} = ingredient;\n  const product = products.find((product) => product.id === productId) || products[0];\n\n  const { title, energy, protein, fat, carb } = product;\n\n  return `<li class=\"ingredient-list-item\" data-id=\"${id}\">\n    <div class=\"ingredient-top\">\n      <h3 class=\"ingredient-title\">${title}</h3>\n      <div class=\"ingredient-count\">\n        <span>${count}</span> ${product.measure}\n      </div>\n    </div>\n\n    <div class=\"ingredient-bottom\">\n      <table class=\"ingredient-info-table\">\n        <tr>\n          <th>Калории</th>\n          <th>Белки</th>\n          <th>Жиры</th>\n          <th>Углеводы</th>\n        </tr>\n        <tr>\n          <td>${energy}</td>\n          <td>${protein}</td>\n          <td>${fat}</td>\n          <td>${carb}</td>\n        </tr>\n      </table>\n\n      <div class=\"controls\">\n        <button class=\"btn btn-remove\"></button>\n      </div>\n    </div>\n  </li>`;\n};\n\nexport default class Ingredient extends AbstractView {\n  constructor(ingredient, products) {\n    super();\n\n    this._ingredient = ingredient;\n    this._products = products;\n\n    this._editClickHandler = this._editClickHandler.bind(this);\n    this._removeClickHandler = this._removeClickHandler.bind(this);\n  }\n\n  getTemplate() {\n    return createIngredientTemplate(this._ingredient, this._products);\n  }\n\n  _editClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.editClick(this._ingredient);\n  }\n\n  _removeClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.removeClick(this._ingredient);\n  }\n\n  setEditClickHandler(callback) {\n    this._callback.editClick = callback;\n    const titleElement = this.getElement().querySelector('.ingredient-title');\n    const countElement = this.getElement().querySelector('.ingredient-count');\n    titleElement.addEventListener('click', this._editClickHandler);\n    countElement.addEventListener('click', this._editClickHandler);\n  }\n\n  setRemoveClickHandler(callback) {\n    this._callback.removeClick = callback;\n    const removeButton = this.getElement().querySelector('.btn-remove');\n    removeButton.addEventListener('click', this._removeClickHandler);\n  }\n}\n","import AbstractView from './abstract';\n\nconst createProductListControlTemplate = (products, selectedProductId) => {\n  let options = '';\n\n  for (const product of products.values()) {\n    const { id, title, isDeleted = false } = product;\n    const isSelected = id === selectedProductId ? 'selected' : '';\n    options += `<option value=\"${id}\" ${isSelected}>${title} ${isDeleted ? '[ УДАЛЕН ]' : ''}</option>`;\n  }\n\n  return `<select>${options}</select>`;\n};\n\nexport default class ProductListControl extends AbstractView {\n  constructor(products, selectedProductId = 0) {\n    super();\n\n    this._products = products;\n    this._selectedProductId = selectedProductId;\n  }\n\n  getTemplate() {\n    return createProductListControlTemplate(this._products, this._selectedProductId);\n  }\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport { urlAlphabet }\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { nanoid } from 'nanoid';\n\nimport { generateChunk } from './mock/chunk';\nimport { generateProduct } from './mock/product';\n\nimport { computeAmount, createChunk } from './utils/chunk';\n\nimport AmountView from './view/amount';\nimport ChunkListPresenter from './presenter/chunk-list';\nimport { remove, render, RenderPosition } from './utils/render';\n\nconst CHUNK_COUNT = 3;\nconst PRODUCT_COUNT = 10;\n\n// const products = new Array(PRODUCT_COUNT).fill(null).map(() => generateProduct());\nlet products = [];\nlet chunks = [];\n\nif (localStorage.getItem('products')) {\n  products = JSON.parse(localStorage.getItem('products'));\n}\n\nif (localStorage.getItem('chunks')) {\n  chunks = JSON.parse(localStorage.getItem('chunks'));\n} else {\n  const titles = ['Завтрак', 'Обед', 'Ужин'];\n  chunks = new Array(titles.length).fill(null).map((item, index) => createChunk(titles[index]));\n}\n\n// const chunks = new Array(CHUNK_COUNT).fill(null).map(() => generateChunk(products));\n\nconst mainElement = document.querySelector('.main');\n\nlet amountComponent = null;\n\nconst renderAmount = (amount) => {\n  if (amountComponent) {\n    remove(amountComponent);\n  }\n  amountComponent = new AmountView(amount);\n  render(mainElement, amountComponent, RenderPosition.BEFOREEND);\n};\n\nconst compute = (chunks) => {\n  const amount = {\n    energy: 0,\n    protein: 0,\n    fat: 0,\n    carb: 0,\n  };\n\n  chunks.forEach((chunk) => {\n    chunk.amount = computeAmount(chunk.ingredients, products);\n    amount.energy += parseInt(chunk.amount.energy);\n    amount.protein += parseInt(chunk.amount.protein);\n    amount.fat += parseInt(chunk.amount.fat);\n    amount.carb += parseInt(chunk.amount.carb);\n  });\n\n  return amount;\n};\n\nconst changeData = (updatedData) => {\n  const amount = compute(updatedData);\n  renderAmount(amount);\n  localStorage.setItem('chunks', JSON.stringify(updatedData));\n  chunkListPresenter.init(updatedData, products);\n};\n\nconst amount = compute(chunks);\nrenderAmount(amount);\n\nconst chunkListPresenter = new ChunkListPresenter(mainElement, changeData);\nchunkListPresenter.init(chunks, products);\n"],"names":[],"sourceRoot":""}